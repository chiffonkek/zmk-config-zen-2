#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "chiffonkek-k3d3+urob/zmk-config-zen-2-main/zmk-nodefree-config/keypos_def/keypos_36keys.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200

    &sk {
    release-after-ms = <2000>;
            };
    &gresc {
    keep-mods = <(MOD_LSFT|MOD_RSFT)>;
            };

/ {
  chosen {
    //zmk,matrix_transform = &default_transform;
    zmk,matrix_transform = &five_column_transform;
  };
};

    &sk {
    release-after-ms = <2000>;
            };
            
#define AS(keycode) &as LS(keycode) keycode
#define QWERTY 0
#define NUMNAV 1
#define FANDM 2
#define SYS 3

/ {

    behaviors {

// Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.

        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            global-quick-tap-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <175>;
            global-quick-tap-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };


        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_FAST_LEFT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick_tap_ms = <175>;
            // global-quick-tap-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;             // requires PR #1423
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_FAST_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick_tap_ms = <175>;
            // global-quick-tap-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            // hold-trigger-on-release;             // requires PR #1423
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <200>;
        };

        as: auto_shift {
                compatible = "zmk,behavior-hold-tap";
                label = "AUTO_SHIFT";
                #binding-cells = <2>;
                tapping_term_ms = <135>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };
            
            
       tdhmfour: Homerow-Mod-Tap-Dance-Four {
                compatible = "zmk,behavior-tap-dance";
                label = "Homerow GUI-Four";
                #binding-cells = <0>;
                tapping-term-ms = <170>;
                bindings = <&hm LGUI N4>, <&kp DOLLAR>;
            };
        tdhmfive: Homerow-Mod-Tap-Dance-Five {
                compatible = "zmk,behavior-tap-dance";
                label = "Homerow GUI-Five";
                #binding-cells = <0>;
                tapping-term-ms = <170>;
                bindings = <&hm LALT N5>, <&kp PERCENT>;
            };
        tdhmsix: Homerow-Mod-Tap-Dance-Six {
                compatible = "zmk,behavior-tap-dance";
                label = "Homerow GUI-Six";
                #binding-cells = <0>;
                tapping-term-ms = <170>;
                bindings = <&hm LCTRL N6>, <&kp CARET>;
            };
        tdhmmin: Homerow-Mod-Tap-Dance-Minus {
                compatible = "zmk,behavior-tap-dance";
                label = "Homerow Shift-Minus";
                #binding-cells = <0>;
                tapping-term-ms = <170>;
                bindings = <&hm LSHFT MINUS>, <&kp UNDER>;
            };     
            
           
        tdhmbkt: Homerow-Mod-Tap-Dance-Bracket {
                compatible = "zmk,behavior-tap-dance";
                label = "Homerow Bracket-GUI";
                #binding-cells = <0>;
                tapping-term-ms = <170>;
                bindings = <&hm RGUI LBKT>, <&as LS(RBKT) RBKT>;
            };


        tdcb: Comma-Backslash {
                compatible = "zmk,behavior-tap-dance";
                label = "Tap Dance Comma Backslash";
                #binding-cells = <0>;
                tapping-term-ms = <170>;
                bindings = <&as LS(COMMA) COMMA>, <&as LS(BSLH) BSLH>;
            };
        tdds: Dot-Slash {
                compatible = "zmk,behavior-tap-dance";
                label = "Tap Dance Dot Slash";
                #binding-cells = <0>;
                tapping-term-ms = <170>;
                bindings = <&as LS(DOT) DOT>, <&as LS(FSLH) FSLH>;
            };
        tdqs: Quote-Semicolon {
                compatible = "zmk,behavior-tap-dance";
                label = "Tap Dance Quote Semicolon";
                #binding-cells = <0>;
                tapping-term-ms = <170>;
                bindings = <&as LS(APOS) APOS>, <&as LS(SEMI) SEMI>;
            };
        };

        combos {
        compatible = "zmk,combos";
        combo_LYR1 {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&to 1>;
        };
        combo_LYR2 {
            timeout-ms = <50>;
            key-positions = <30 32>;
            bindings = <&to 2>;
        };
        combo_LYR3 {
            timeout-ms = <50>;
            key-positions = <30 31 32>;
            bindings = <&to 3>;
        };
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&kp CAPS>;
            layers = <0>;
        };
        combo_bspc {
            timeout-ms = <60>;
            key-positions = <8 9>;
            bindings = <&kp BKSP>;
            layers = <0 1>;
        };
        combo_tab {
            timeout-ms = <60>;
            key-positions = <0 1>;
            bindings = <&kp TAB>;
            layers = <0 1>;
        };
        combo_esc {
            timeout-ms = <60>;
            key-positions = <1 2>;
            bindings = <&gresc>;
            layers = <0 1>;
        };
        combo_wordleft {
            timeout-ms = <60>;
            key-positions = <16 17>;
            bindings = <&kp LC(LEFT)>;
            layers = <0>;
        };    
        combo_wordright {
            timeout-ms = <60>;
            key-positions = <17 18>;
            bindings = <&kp LC(RIGHT)>;
            layers = <0>;            
        };
        
        combo_home {
            timeout-ms = <60>;
            key-positions = <7 16>;
            bindings = <&kp HOME>;
            layers = <0>;            
        };     
        
        combo_end {
            timeout-ms = <60>;
            key-positions = <7 18>;
            bindings = <&kp END>;
            layers = <0>;            
        };         
        
        combo_pgup {
            timeout-ms = <60>;
            key-positions = <7 16 18>;
            bindings = <&kp PG_UP>;
            layers = <0>;            
        };   
        
        combo_pgdown {
            timeout-ms = <60>;
            key-positions = <16 17 18>;
            bindings = <&kp PG_DN>;
            layers = <0>;            
        };        
                
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp Q      &kp W      &kp E       &kp R       &kp T          &kp Y &kp U         &kp I        &kp O       &kp P
   &hm_l LGUI A &hm_l LALT S &hm_l LCTRL D &hm_l LSHFT F &kp G          &kp H &hm_r RSHFT J   &hm_r RCTRL K  &hm_r LALT L  &tdhmbkt
   &kp Z      &kp X      &kp C       &kp V       &kp B          &kp N &kp M         &tdcb        &tdds       &tdqs
                   &to 0 &lt 2 RET &lt 1 SPC                                    &lt 2 RET &lt 1 SPC &mo 3
                        >;
                };
                numnav_layer {
                        label = "NUMNAV";
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   AS(N7)       AS(N8)       AS(N9)        AS(N0)    &kp LC(X)           &kp HOME    &kp PG_UP       &kp UP          &kp PG_DN       &kp END
   &tdhmfour    &tdhmfive    &tdhmsix      &tdhmmin  &kp LC(C)           &kp INS     &hm_r RSHFT LEFT  &hm_r RCTRL DOWN  &hm_r RALT RIGHT  &trans
   AS(N1)       AS(N2)       AS(N3)        AS(EQUAL) &kp LC(V)           &kp DEL     &kp PSCRN       &trans          &trans          &trans
                   &to 0 &trans &trans                                        &trans &trans &to 0
                        >;
                };

                fandm_layer {
                        label = "SYMBOL";
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp F7      &kp F8       &kp F9        &kp F12                       &sk LCTRL  &sk LGUI               &trans  &trans  &trans &trans
   &hm_shift_l LGUI F4 &hm_shift_l LALT F5  &hm_shift_l LCTRL F6  &hm_shift_r LSHFT F11                 &sk LALT   &sk LC(LS(LALT))       &trans  &trans  &trans &trans
   &kp F1      &kp F2       &kp F3        &kp F10                       &sk LSHIFT &sk LC(LS(LA(LGUI)))   &trans  &trans  &trans &trans
                   &to 0 &trans &trans                                        &trans &trans &to 0
                        >;
                };
                
                sys_layer {
                        label = "SYS";
                        bindings = <
   &bt BT_CLR   &sys_reset    &bootloader    &none  &none               &none  &none  &kp C_VOL_DN  &kp C_MUTE &kp C_VOL_UP
   &bt BT_SEL 3 &bt BT_SEL 4  &out OUT_TOG   &none  &none               &none  &none  &kp C_PREV    &kp C_PP   &kp C_NEXT
   &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2   &none  &none               &none  &none  &kp C_BRI_DN  &none      &kp C_BRI_UP 
                   &trans &trans &trans                                      &trans &trans &to 0
                        >;
                };                
        };
};
